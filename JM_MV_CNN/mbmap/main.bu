#include "define.h"

#include <stdio.h>
#include <stdlib.h>

// Input parameters
bool GRID_8X8, SHOW_HELP ; 
int FRAME_WIDTH, FRAME_HEIGHT ;
const char *INPUT_PATH, *OUTPUT_PATH ;


int main(int argc, const char* argv[])
{
	Helper::parse_options(argc, argv);

	int mbsize ; mbsize = GRID_8X8 ? 8:16 ;

	// Read MVs and load into vector
	JMacroBlock mb ; vector<JMacroBlock> mbvec ;

        FILE * pFile;
        pFile = fopen ( INPUT_PATH , "rb" );
        if (pFile==NULL) {fputs ("File error",stderr); exit (1);}
    
        long lSize ; int *buffer ; size_t result ;
        
        // obtain file size:
        fseek (pFile , 0 , SEEK_END) ; lSize = ftell(pFile) ;
        rewind (pFile);
        
        // Allocate buffer memory 
        buffer = (int*) malloc (lSize);
        if (buffer == NULL) {fputs ("Memory error",stderr); exit (2);}
        
        // copy the file into the buffer:
        result = fread(buffer,sizeof(int),lSize/sizeof(int),pFile); fclose (pFile) ;
        if (result != lSize) {fputs ("Reading error",stderr); exit (3);}
         
        free (buffer);
        return 0;
} // main

   
	
/*










	while(true){
		int last_frame = 0 ;
		bool same_frame = true ; 
		while(same_frame){

		same_frame = (mb.frame == last_frame)
		mb.frame
		mb.type 
		mb.dx
		mbvec.push_back(mb)
		last_frame = mb.frame ;
		}

	}

  // the iterator constructor can also be used to construct from arrays:
  int myints[] = {16,2,77,29};
  std::vector<int> fifth (myints, myints + sizeof(myints) / sizeof(int) );

  std::cout << "The contents of fifth are:";
  for (std::vector<int>::iterator it = fifth.begin(); it != fifth.end(); ++it)
    std::cout << ' ' << *it;
  std::cout << '\n';

	clock_t begin = clock();

	AVL_H264 avlh = AVL_H264() ;
	avlh.initialize() ;	
	clock_t begin_ffinit = clock();
	while(avlh.get_motion_vectors()){continue ;}

	clock_t end = clock();
	double time_spent_stdout = (double)(end - begin) / CLOCKS_PER_SEC;

	fprintf(stdout, "Runtime: %f\n", (time_spent_stdout));

}
*/
