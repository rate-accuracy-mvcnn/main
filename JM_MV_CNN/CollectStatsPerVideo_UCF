#!/bin/bash
#clear

# Set initial default parameters
enc_cfg=encoder_option2.cfg		#JM encoder configuration file
QPISlice=35 			#value [0 - 51]
QPPSlice=35 			#value [0 - 51]
SearchRange=16			#value [16,32,64]
mbmapXxX=8			#value [8,16]
SetType="train"			#value [0:Train Set,1: Test Set]
TTSet=01			#UCF-101 Split Set [01 02 03]
IndexFirstVideo=0		#Index of first video to be encoded [1,2, .... ]
NumVideos=3			#Number of Video files to be encoded
StrComment="_A"			#Comment to be added at the end of the directory that will be made (if doesn't exist) to contain the output MVs
Overwrite=1			#Overwrite any exisitng MV files in the directory
PathWay="../JMMV"

## Parsing Command Line Parameters
## cmd exmaple: ./Generate-Split-1 -ecfg=encoder.cfg -qp=25 -sr=16 -res=4 -settype=test sset=01 -ifvid=1 -nvid=5 -strcom=Opt1a
for i in "$@"
do
case $i in
    -ecfg=*|--ecfg=*)
    enc_cfg="${i#*=}"
    shift
    ;;
    -qp=*|--qp=*)
    QPISlice="${i#*=}"
    QPPSlice="${i#*=}"
    shift
    ;;
    -sr=*|--sr=*)
    SearchRange="${i#*=}"
    shift
    ;;
    -res=*|--res=*)
    mbmapXxX="${i#*=}"
    shift
    ;;
    -settype=*|--settype=*)
    SetType="${i#*=}"
    shift
    ;;
   -sset=*|--sset=*)
    TTSet="${i#*=}"
    shift
    ;;
    -ifvid=*|--ifvid=*)
    IndexFirstVideo="${i#*=}"
    shift
    ;;
    -nvid=*|--nvid=*)
    NumVideos="${i#*=}"
    shift
    ;;
   -ow=*|--ow=*)
    Overwrite="${i#*=}"
    shift
    ;;
   -strcom=*|--strcom=*)
    StrComment="_${i#*=}"
    shift
    ;;
    *)
          # unknown option
    ;;
esac
done
#### End Parsing Command Line Parameters

# Hardcoded Parameters
NumFrame=30000
IndexLastVideo=$((IndexFirstVideo + NumVideos - 1))
#%%%%%%%%%% Read file list and identify the location of the video and the MV output file name
if [ $SetType = "train" ] || [ $SetType = "Train" ];
then
SetType="train"
InputFileList="./UCF_trainlist"$TTSet".txt"
else if [ $SetType = "test" ] || [ $SetType = "Test" ];
then
SetType="test"
InputFileList="./UCF_testlist"$TTSet".txt"
else
echo "$SetType is not recognized as set type. It must be train or test"
exit 1
fi
fi

IFS=$'\n' read -d '' -r -a Lines < $InputFileList  #Read the list of test/training video files

if [ $IndexLastVideo -gt ${#Lines[@]} ]
then
IndexLastVideo=${#Lines[@]}
fi
TotalVideos=$((IndexLastVideo-IndexFirstVideo+1))

#%%% delete Stats file
if [ $SetType = "train" ]
then
StatsFile=$PathWay"/Stats_Orig_NOTexture_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment.dat"
else
StatsFile=$PathWay"/Stats_Orig_NOTexture_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment.dat"
fi

if [[ ( $Overwrite -eq 1 ) && (-e $StatsFile) ]]
then
rm -f $StatsFile
echo "Video# Frames_Orig  Size_Orig  Size_Motion_Orig  Frames_NoTexture  Size_NoTexture Size_Motion_NoTexture Mode0Copy Mode1(16x16) Mode2(16x8) Mode3(8x16) Mode4(8x8) Mode0Copy_Motion Mode1(16x16)_Motion Mode2(16x8)_Motion Mode3(8x16)_Motion Mode4(8x8)_Motion PSNRY MSEY File_Name" >> $StatsFile
fi


#%%%%%%%%%% Hidder General Info
echo %########################################################################################
echo "JM config file=${enc_cfg}, QP=$QPISlice, Search Range=$SearchRange, MV Resolution=$mbmapXxX, UCF-101 Split Set = $TTSet"
echo "Set type (train/test)=$SetType, Index of First Video = $IndexFirstVideo, Number of Videos = $TotalVideos"  
echo %########################################################################################

cnt1=$IndexFirstVideo;
cnt2=1; #increment 
while [ $cnt1 -le $IndexLastVideo ]
do
Line=${Lines[$cnt1]}
Directory="${Line%/*}"
FileName="${Line##*/}"
FileNameP1="${FileName%.*}"
FileNameP2="avi"
AbsFileName=$Directory"/"$FileNameP1.$FileNameP2

#%%%%%%%%%% Show Processing Progress to keep track
PerCompleted1=$((100*(cnt1-IndexFirstVideo+1)/(IndexLastVideo-IndexFirstVideo+1)))
PerCompleted2=$((100*(cnt1-IndexFirstVideo+1)%(IndexLastVideo-IndexFirstVideo+1)))
echo "($StrComment, $SetType) processing video file number $cnt1  [$IndexFirstVideo - $IndexLastVideo] ($AbsFileName) ... $PerCompleted1.$PerCompleted2% completed .. $(date +"%d-%m-%y %T")"

#%%%%%%%%%%%%%%%%%%%%%%%%%% Identify file names to read for rate

#%%%%%%%%%% Check if directory exist otherwise make it, and then move the MV file to the directory after naming it appropriately"

if ! [ -d $PathWay ]
then
echo "$PathWay doens't exit"
break
fi


if [ $SetType = "train" ]
then
 
 if ! [ -d "$PathWay/JMStats_NoTexture_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment" ]
 then
echo "$PathWay/JMStats_NoTexture_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment doens't exit"
 break
 fi

 if ! [ -d "$PathWay/JMStats_OrigJM_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment" ]
 then
echo "$PathWay/JMStats_OrigJM_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment doesn't exit"
 break
 fi

JMStatsNoTextureFileName="$PathWay/JMStats_NoTexture_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat"
JMFrameStatsNoTextureFileName="$PathWay/JMStats_NoTexture_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat"
JMStatsOrigFileName="$PathWay/JMStats_OrigJM_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat"
JMFrameStatsOrigFileName="$PathWay/JMStats_OrigJM_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat"
StatsFile="$PathWay/Stats_Orig_NOTexture_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment.dat"

else

 if ! [ -d "$PathWay/JMStats_NoTexture_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment" ]
 then
 echo "$PathWay/JMStats_NoTexture_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrCommen doesn't exit"
 break 
 fi

 if ! [ -d "$PathWay/JMStats_OrigJM_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment" ]
 then
 echo "$PathWay/JMStats_OrigJM_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment doesn't exit"
 break
 fi

JMStatsNoTextureFileName="$PathWay/JMStats_NoTexture_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat"
JMFrameStatsNoTextureFileName="$PathWay/JMStats_NoTexture_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat"
JMStatsOrigFileName="$PathWay/JMStats_OrigJM_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat"
JMFrameStatsOrigFileName="$PathWay/JMStats_OrigJM_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat"
StatsFile="$PathWay/Stats_Orig_NOTexture_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment.dat"
fi



#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#%% check if the Stats files exist and not of zero size

if [[ (! -s $JMStatsNoTextureFileName) || (! -s $JMFrameStatsNoTextureFileName) || (! -s $JMStatsOrigFileName) || (! -s $JMFrameStatsOrigFileName) || (! -e $JMStatsNoTextureFileName) || (! -e $JMFrameStatsNoTextureFileName) || (! -e $JMStatsOrigFileName) || (! -e $JMFrameStatsOrigFileName) ]]
then
#echo "one or more of the following files doesn't exit or of zero size: $JMStatsNoTextureFileName, $JMFrameStatsNoTextureFileName, $JMStatsOrigFileName, $JMFrameStatsOrigFileName"

echo "....... Stats file is missing for video $cnt1"
echo 

else



## Parsing the Number of frames, size of bitstream, and size of motion info from the $JMFrameStatsOrigFileName
Frame=0
Size_Frame=0
Size_Motion=0;
Size_Frame_Total=0;
Size_Motion_Total=0;
while IFS=$'\t' read -r JMSLine
do
#  printf 'f1: %s\n' "$JMSLine"
  IFS='|.' read -r -a JMSLine_array1 <<< "$JMSLine"
  if [[ "${JMSLine_array1[0]}" == *"Motion"* ]]
  then
    Size_Motion=$(echo ${JMSLine_array1[4]} | tr -d ' ')
    Size_Motion_Total=$((Size_Motion_Total + Size_Motion))
  fi

  IFS='=,' read -r -a JMSLine_array2 <<< "$JMSLine"
  if [[ "${JMSLine_array2[0]}" == *"Frame"* ]]
  then
    Frame=$(echo ${JMSLine_array2[1]} | tr -d ' ')
    Size_Frame=$(echo ${JMSLine_array2[3]} | tr -d ' ') 

    if [[ ( $Frame == '00000' ) && ( $Size_Frame_Total != 0 ) ]]
    then
      Size_First_Frame=$Size_Frame;
    fi
    
    Size_Frame_Total=$((Size_Frame_Total + Size_Frame)) 
#  echo $Frame $Size_Frame $Size_Frame_Total $Size_Motion_Total
  fi

done < <(paste $JMFrameStatsOrigFileName)

Frame_Tolal_Orig=$Frame;
Size_Frame_Total_Orig=$Size_Frame_Total;
Size_Motion_Total_Orig=$Size_Motion_Total;
#echo $Frame_Tolal_Orig $Size_Frame_Total_Orig $Size_Motion_Total_Orig


## Parsing the Number of frames, size of bitstream, and size of motion info from the $JMFrameStatsNoTectureFileName
Frame=0
Size_Frame=0
Size_Motion=0;
Size_Frame_Total=0;
Size_Motion_Total=0;
while IFS=$'\t' read -r JMSLine
do
#  printf 'f1: %s\n' "$JMSLine"
  IFS='|.' read -r -a JMSLine_array1 <<< "$JMSLine"
  if [[ "${JMSLine_array1[0]}" == *"Motion"* ]]
  then
    Size_Motion=$(echo ${JMSLine_array1[4]} | tr -d ' ')
    Size_Motion_Total=$((Size_Motion_Total + Size_Motion))
  fi

  IFS='=,' read -r -a JMSLine_array2 <<< "$JMSLine"
  if [[ "${JMSLine_array2[0]}" == *"Frame"* ]]
  then
    Frame=$(echo ${JMSLine_array2[1]} | tr -d ' ') 
    Size_Frame=$(echo ${JMSLine_array2[3]} | tr -d ' ')  

    if [[ ( $Frame == '00000' ) && ( $Size_Frame_Total != 0 ) ]]
    then
      Size_Frame=$Size_First_Frame;
    fi
  
    Size_Frame_Total=$((Size_Frame_Total + Size_Frame))   
#    echo $Frame $Size_Frame $Size_Frame_Total $Size_Motion_Total 
  fi
done < <(paste $JMFrameStatsNoTextureFileName)

Frame_Tolal_NoTexture=$Frame;
Size_Frame_Total_NoTexture=$Size_Frame_Total;
Size_Motion_Total_NoTexture=$Size_Motion_Total;
#echo $Frame_Tolal_NoTexture $Size_Frame_Total_NoTexture $Size_Motion_Total_NoTexture


## Parsing the Number of frames, size of bitstream, and size of motion info from the $JMStatsOrigFileName

Frame=0;
Mode0Copy=0;
Mode116x16=0;
Mode216x8=0;
Mode38x16=0;
Mode48x8=0;

Mode0Copy_Motion=0;
Mode116x16_Motion=0;
Mode216x8_Motion=0;
Mode38x16_Motion=0;
Mode48x8_Motion=0;

PSNRY=0;
MSEY=0;

while IFS=$'\t' read -r JMSLine
do
#  printf 'f1: %s\n' "$JMSLine"
  IFS='|, ' read -r -a JMSLine_array3 <<< "$JMSLine"
  if [[ ("${JMSLine_array3[0]}" == *"Mode"*) && ("${JMSLine_array3[1]}" == *"0"*) && ("${JMSLine_array3[2]}" == *"(copy)"*) ]]
  then
    Mode0Copy=$(echo ${JMSLine_array3[3]} | tr -d ' ')
    Mode0Copy_Motion=$(echo ${JMSLine_array3[4]} | tr -d ' ')
  fi

  if [[ ("${JMSLine_array3[0]}" == *"Mode"*) && ("${JMSLine_array3[1]}" == *"1"*) && ("${JMSLine_array3[2]}" == *"(16x16)"*) ]]
  then
    Mode116x16=$(echo ${JMSLine_array3[3]} | tr -d ' ')
    Mode116x16_Motion=$(echo ${JMSLine_array3[4]} | tr -d ' ')
  fi

  if [[ ("${JMSLine_array3[0]}" == *"Mode"*) && ("${JMSLine_array3[1]}" == *"2"*) && ("${JMSLine_array3[2]}" == *"(16x8)"*) ]]
  then
    Mode216x8=$(echo ${JMSLine_array3[3]} | tr -d ' ')
    Mode216x8_Motion=$(echo ${JMSLine_array3[4]} | tr -d ' ')
  fi


  if [[ ("${JMSLine_array3[0]}" == *"Mode"*) && ("${JMSLine_array3[1]}" == *"3"*) && ("${JMSLine_array3[2]}" == *"(8x16)"*) ]]
  then
    Mode38x16=$(echo ${JMSLine_array3[3]} | tr -d ' ')
    Mode38x16_Motion=$(echo ${JMSLine_array3[4]} | tr -d ' ')
  fi

  if [[ ("${JMSLine_array3[0]}" == *"Mode"*) && ("${JMSLine_array3[1]}" == *"4"*) && ("${JMSLine_array3[2]}" == *"(8x8)"*) ]]
  then
    Mode48x8=$(echo ${JMSLine_array3[3]} | tr -d ' ')
    Mode48x8_Motion=$(echo ${JMSLine_array3[4]} | tr -d ' ')
  fi

  if [[ ("${JMSLine_array3[0]}" == *"Y"*) && ("${JMSLine_array3[2]}" == *"PSNR"*) && ("${JMSLine_array3[6]}" == *"MSE"*) ]]
  then
    PSNRY=$(echo ${JMSLine_array3[10]} | tr -d ' ')
    MSEY=$(echo ${JMSLine_array3[12]} | tr -d ' ')
  fi
done < <(paste $JMStatsOrigFileName)

#echo $cnt1 $Mode0Copy $Mode116x16 $Mode216x8 $Mode38x16 $Mode48x8 $PSNRY $MSEY


#%%%%%%%%%% Check if directory exist otherwise make it, and then move the MV file to the directory after naming it appropriately"

echo $cnt1 $Frame_Tolal_Orig $Size_Frame_Total_Orig $Size_Motion_Total_Orig $Frame_Tolal_NoTexture $Size_Frame_Total_NoTexture $Size_Motion_Total_NoTexture $Mode0Copy $Mode116x16 $Mode216x8 $Mode38x16 $Mode48x8 $Mode0Copy_Motion $Mode116x16_Motion $Mode216x8_Motion $Mode38x16_Motion $Mode48x8_Motion $PSNRY $MSEY $AbsFileName >> $StatsFile 
fi

cnt1=$((cnt1 + cnt2))
done < "$InputFileList"   #until end of FileNameList or NumVideos


#(($SetType = "train") && (! -e "../JMMV/JMMV_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin"))
