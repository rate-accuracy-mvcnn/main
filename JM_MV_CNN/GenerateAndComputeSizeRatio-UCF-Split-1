#!/bin/bash
#clear

# Set initial default parameters
enc_cfg=encoder_option2.cfg		#JM encoder configuration file
QPISlice=40 			#value [0 - 51]
QPPSlice=40 			#value [0 - 51]
SearchRange=16			#value [16,32,64]
mbmapXxX=8			#value [8,16]
SetType="train"			#value [0:Train Set,1: Test Set]
TTSet=01			#UCF-101 Split Set [01 02 03]
IndexFirstVideo=0		#Index of first video to be encoded [1,2, .... ]
NumVideos=1			#Number of Video files to be encoded
StrComment="A"			#Comment to be added at the end of the directory that will be made (if doesn't exist) to contain the output MVs
Overwrite=1			#Overwrite any exisitng MV files in the directory

PathSourceVid='/home/mohammad/Downloads/UCF-101/'

## Parsing Command Line Parameters
## cmd exmaple: ./Generate-Split-1 -ecfg=encoder.cfg -qp=25 -sr=16 -res=4 -settype=test sset=01 -ifvid=1 -nvid=5 -strcom=Opt1a
for i in "$@"
do
case $i in
    -ecfg=*|--ecfg=*)
    enc_cfg="${i#*=}"
    shift
    ;;
    -qp=*|--qp=*)
    QPISlice="${i#*=}"
    QPPSlice="${i#*=}"
    shift
    ;;
    -sr=*|--sr=*)
    SearchRange="${i#*=}"
    shift
    ;;
    -res=*|--res=*)
    mbmapXxX="${i#*=}"
    shift
    ;;
    -settype=*|--settype=*)
    SetType="${i#*=}"
    shift
    ;;
   -sset=*|--sset=*)
    TTSet="${i#*=}"
    shift
    ;;
    -ifvid=*|--ifvid=*)
    IndexFirstVideo="${i#*=}"
    shift
    ;;
    -nvid=*|--nvid=*)
    NumVideos="${i#*=}"
    shift
    ;;
   -ow=*|--ow=*)
    Overwrite="${i#*=}"
    shift
    ;;
   -strcom=*|--strcom=*)
    StrComment="_${i#*=}"
    shift
    ;;
    *)
          # unknown option
    ;;
esac
done
#### End Parsing Command Line Parameters

# Hardcoded Parameters
NumFrame=30000
IndexLastVideo=$((IndexFirstVideo + NumVideos - 1))
cntLoop=1; #To prevent loop
#%%%%%%%%%% Read file list and identify the location of the video and the MV output file name
if [ $SetType = "train" ] || [ $SetType = "Train" ];
then
SetType="train"
InputFileList="./UCF_trainlist"$TTSet".txt"
else if [ $SetType = "test" ] || [ $SetType = "Test" ];
then
SetType="test"
InputFileList="./UCF_testlist"$TTSet".txt"
else
echo "$SetType is not recognized as set type. It must be train or test"
exit 1
fi
fi

IFS=$'\n' read -d '' -r -a Lines < $InputFileList  #Read the list of test/training video files

if [ $IndexLastVideo -gt ${#Lines[@]} ]
then
IndexLastVideo=${#Lines[@]}
fi
TotalVideos=$((IndexLastVideo-IndexFirstVideo+1))

#%%%%%%%%%% Hidder General Info
echo %########################################################################################
echo "JM config file=${enc_cfg}, QP=$QPISlice, Search Range=$SearchRange, MV Resolution=$mbmapXxX, UCF-101 Split Set = $TTSet"
echo "Set type (train/test)=$SetType, Index of First Video = $IndexFirstVideo, Number of Videos = $TotalVideos"  
echo %########################################################################################

cnt1=$IndexFirstVideo;
cnt2=1; #increment 
while [ $cnt1 -le $IndexLastVideo ]
do
Line=${Lines[$cnt1]}

Directory="${Line%/*}"
FileName="${Line##*/}"
FileNameP1="${FileName%.*}"
FileNameP2="avi"
AbsFileName=$Directory"/"$FileNameP1.$FileNameP2

#%%%%%%%%%% Show Processing Progress to keep track
PerCompleted1=$((100*(cnt1-IndexFirstVideo+1)/(IndexLastVideo-IndexFirstVideo+1)))
PerCompleted2=$((100*(cnt1-IndexFirstVideo+1)%(IndexLastVideo-IndexFirstVideo+1)))

echo "($StrComment, $SetType) processing video file number $cnt1  [$IndexFirstVideo - $IndexLastVideo] ($AbsFileName) ... $PerCompleted1.$PerCompleted2% completed .. $(date +"%d-%m-%y %T")"


#%% check if the MV already made and stored or its size is zero

if [[ (! -s ../JMMV/JMMV_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin) || (! -s ../JMMV/JMStats_NoTexture_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat) || (! -s ../JMMV/JMStats_NoTexture_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat) || (! -s ../JMMV/JMStats_OrigJM_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat) || (! -s ../JMMV/JMStats_OrigJM_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat) ]]
then
TrainIsZero=true
else
TrainIsZero=false
fi

if [[ (! -s ../JMMV/JMMV_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin) || (! -s ../JMMV/JMStats_NoTexture_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat) || (! -s ../JMMV/JMStats_NoTexture_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat) || (! -s ../JMMV/JMStats_OrigJM_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat) || (! -s ../JMMV/JMStats_OrigJM_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat) ]]
then
TestIsZero=true
else
TestIsZero=false
fi

if [[ ((($Overwrite -eq 1) || (($SetType = "train") && (! -e "../JMMV/JMMV_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin")) || (($SetType = "train") && ( $TrainIsZero = true))) || (($Overwrite -eq 1) || (($SetType = "test") && (! -e "../JMMV/JMMV_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin")) || (($SetType = "test") && ( $TestIsZero = true )))) ]] ; 
then

#%%%%%%%%%% Transcoding FileName from .avi to .yuv and store the output yuv file in ./vid/"
cd JM_MVX_NoTexture/bin
if [ ! -e "$PathSourceVid$AbsFileName" ] ; then
echo "$PathSourceVid$AbsFileName" "doesn't exit"
break
fi

rm ./vid/JMInputVideo.yuv
ffmpeg -loglevel panic -i $PathSourceVid$AbsFileName -vf scale=320:240 -vcodec rawvideo -pix_fmt yuv420p './vid/JMInputVideo.yuv' > /dev/null
cp -f ./vid/JMInputVideo.yuv ../../JM_MVX/bin/vid/ > /dev/null

if [ ! -e "./vid/JMInputVideo.yuv" ] ; then
echo "Problem with ffmpeg while converting $AbsFileName to yuv, ./vid/JMInputVideo.yuv is not generated"
break
fi
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%% Encoding and Decoding using NoTexture JM %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%% Encoding FileName from .yuv to .264 using JM encoder"
if [ ! -e "$enc_cfg" ] ; then
echo "$enc_cfg" "doesn't exit"
break
fi

rm ./vid/JMEncodedVideo.264
rm -rf ./FrameStats.dat
#./lencod.exe -f $enc_cfg -p InputFile="./vid/JMInputVideo.yuv" -p QPISlice=$QPISlice -p QPPSlice=$QPPSlice -p SearchRange=$SearchRange -p FramesToBeEncoded=$NumFrame -p Verbose=0 -p OutputFile="./vid/JMEncodedVideo.264" > logNoTexture # > /dev/null

./lencod.exe -f $enc_cfg -p InputFile="./vid/JMInputVideo.yuv" -p QPISlice=$QPISlice -p QPPSlice=$QPPSlice -p SearchRange=$SearchRange -p FramesToBeEncoded=$NumFrame -p OutputFile="./vid/JMEncodedVideo.264" > logNoTexture # > /dev/null

if [ ! -e "./vid/JMEncodedVideo.264" ] ; then
echo "Problem with encoding [$AbsFileName] yuv to 264, ./vid/JMEncodedVideo.264 is not generated"
break
fi

SizeNoTexture=`ls -la ./vid/JMEncodedVideo.264` #% to display the size of file
echo $SizeNoTexture >> stats.dat
cat logNoTexture >> stats.dat

#%%%%%%%%%% Decoding FileName from .264 to .yuv using JM decoder"
rm mv.bin > /dev/null 2>&1
rm ./vid/JMDecodedVideo.yuv
./ldecod.exe -f decoder.cfg -p InputFile="./vid/JMEncodedVideo.264" -p OutputFile="./vid/JMDecodedVideo.yuv" > /dev/null

if [ ! -e "./vid/JMDecodedVideo.yuv" ] ; then
echo "Problem with decoding [$AbsFileName].264 to yuv, ./vid/JMDecodedVideo.yuv is not generated"
break
fi

#%%%%%%%%%%%%%%%%% Encoding and Decoding using Original JM %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%% copying yuv video files and config files from NoTexture JM directory to Original JM directory %%%%%%%%%%%%%%%%%%
rm ../../JM_MVX/bin/vid/JMInputVideo.yuv
cp -f ./vid/JMInputVideo.yuv ../../JM_MVX/bin/vid/. > /dev/null
if [ ! -e "../../JM_MVX/bin/vid/JMInputVideo.yuv" ] ; then
echo "Problem with copying the $AbsFileName yuv file from JM_MV_NoTexture directory to JM_MV directory, ../../JM_MVX/bin/vid/JMInputVideo.yuv is not copied"
break
fi

rm ../../JM_MVX/bin/$enc_cfg
cp -f ./$enc_cfg ../../JM_MVX/bin/. > /dev/null
if [ ! -e "../../JM_MVX/bin/$enc_cfg" ] ; then
echo "Copyinh $enc_cfg from JM_MV_NoTexture directory to JM_MV directory failed"
break
fi

#%%%%%%%%%% Encoding FileName from .yuv to .264 using JM encoder"
cd ../../JM_MVX/bin #% move to the Original JM Directory

if [ ! -e "$enc_cfg" ] ; then
echo "$enc_cfg" "doesn't exit"
break
fi

rm ./vid/JMEncodedVideo.264
rm -rf ./FrameStats.dat
#./lencod.exe -f $enc_cfg -p InputFile="./vid/JMInputVideo.yuv" -p QPISlice=$QPISlice -p QPPSlice=$QPPSlice -p SearchRange=$SearchRange -p FramesToBeEncoded=$NumFrame -p Verbose=0 -p OutputFile="./vid/JMEncodedVideo.264" > logOrig #> /dev/null

./lencod.exe -f $enc_cfg -p InputFile="./vid/JMInputVideo.yuv" -p QPISlice=$QPISlice -p QPPSlice=$QPPSlice -p SearchRange=$SearchRange -p FramesToBeEncoded=$NumFrame -p OutputFile="./vid/JMEncodedVideo.264" > logOrig #> /dev/null

if [ ! -e "./vid/JMEncodedVideo.264" ] ; then
echo "Problem with encoding [$AbsFileName] yuv to 264, ./vid/JMEncodedVideo.264 is not generated"
break
fi

SizeOrig=`ls -la ./vid/JMEncodedVideo.264`  #% to display the size of file
echo $SizeOrig >> stats.dat
cat logOrig >> stats.dat

cd ../../JM_MVX_NoTexture/bin #% moveing back to the Original JM Directory
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


#%%%%%%%%%% Mapping MV to Macroblocks (make grid) and make them in a format suitable as input to classifier (Training/Testing)"
rm ../../mbmap/mv_dec.bin
mv -f mv.bin ../../mbmap/mv_dec.bin
cd ../../mbmap
if [ $mbmapXxX -eq 8 ] || [ $mbmapXxX -eq 4 ];
then
./mbmap -h 240 -w 320 -$mbmapXxX -o JMMV_mbmap.bin mv_dec.bin > /dev/null
else
 ./mbmap -h 240 -w 320 -o JMMV_mbmap.bin mv_dec.bin > /dev/null
fi

if [ ! -e "./JMMV_mbmap.bin" ] ; then
echo "Mapping MV to Macroblocks (Grid of MVs) for [$AbsFileName], ./JMMV_mbmap.bin is not generated"
break
fi

#%%%%%%%%%% Check if directory exist otherwise make it, and then move the MV file to the directory after naming it appropriately"

if ! [ -d ../../JMMV ]
then
mkdir ../../JMMV
fi


if [ $SetType = "train" ]
then
 if ! [ -d ../../JMMV/JMMV_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir ../../JMMV/JMMV_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment
 fi
 
 if ! [ -d ../../JMMV/JMStats_NoTexture_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir ../../JMMV/JMStats_NoTexture_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment
 fi

 if ! [ -d ../../JMMV/JMStats_OrigJM_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir ../../JMMV/JMStats_OrigJM_Train$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment
 fi

mv -f JMMV_mbmap.bin ../../JMMV/JMMV_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin
mv -f ../JM_MVX_NoTexture/bin/stats.dat ../../JMMV/JMStats_NoTexture_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat
mv -f ../JM_MVX_NoTexture/bin/FrameStats.dat ../../JMMV/JMStats_NoTexture_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat
mv -f ../JM_MVX/bin/stats.dat ../../JMMV/JMStats_OrigJM_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat
mv -f ../JM_MVX/bin/FrameStats.dat ../../JMMV/JMStats_OrigJM_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat

else

 if ! [ -d ../../JMMV/JMMV_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir ../../JMMV/JMMV_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment 
 fi
 
 if ! [ -d ../../JMMV/JMStats_NoTexture_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir ../../JMMV/JMStats_NoTexture_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment 
 fi

 if ! [ -d ../../JMMV/JMStats_OrigJM_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment ]
 then
 mkdir ../../JMMV/JMStats_OrigJM_Test$TTSet"_"QP$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment
 fi


mv -f JMMV_mbmap.bin ../../JMMV/JMMV_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin
mv -f ../JM_MVX_NoTexture/bin/stats.dat ../../JMMV/JMStats_NoTexture_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat
mv -f ../JM_MVX_NoTexture/bin/FrameStats.dat ../../JMMV/JMStats_NoTexture_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat
mv -f ../JM_MVX/bin/stats.dat ../../JMMV/JMStats_OrigJM_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMStats_$FileNameP1.dat
mv -f ../JM_MVX/bin/FrameStats.dat ../../JMMV/JMStats_OrigJM_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMFrameStats_$FileNameP1.dat

fi

cd ..

fi # end check if the files already exists

## this is added to verify that the produced JMMV files are of the same size with a reference set of JMMV files (the tested reference is QP35)
if [ $cntLoop -eq 10 ] ## will never happen and made only to comment the lower part
then
if [ $SetType = "train" ]
then
 IFS=' ' read -r -a JMSLine_array1 <<< $(ls -la $(find ../JMMV/JMMV_Train01_QPref_MVSR16_MVRes8_A/. -name JMMV_$FileNameP1.bin))
 IFS=' ' read -r -a JMSLine_array2 <<< $(ls -la $(find ../JMMV/JMMV_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/. -name JMMV_$FileNameP1.bin))
 if ! [[ "${JMSLine_array1[4]}" == "${JMSLine_array2[4]}" ]]
 then 
  if [ $cntLoop -le 1 ]
  then
   echo ${JMSLine_array1[4]}
   echo ${JMSLine_array2[4]}
   rm -rf ../JMMV/JMMV_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin
   cnt1=$((cnt1 - cnt2))
   cntLoop=$(( cntLoop + 1 ))
  else
   cntLoop=0;
   echo "The size of JMMV_$FileNameP1.bin doesn't match the size of the reference JMMVxxxxxxx.bin file"
  fi
 fi

else

 IFS=' ' read -r -a JMSLine_array1 <<< $(ls -la $(find ../JMMV/JMMV_Test01_QPref_MVSR16_MVRes8_A/. -name JMMV_$FileNameP1.bin))
 IFS=' ' read -r -a JMSLine_array2 <<< $(ls -la $(find ../JMMV/JMMV_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/. -name JMMV_$FileNameP1.bin))
 if ! [[ "${JMSLine_array1[4]}" == "${JMSLine_array2[4]}" ]]
 then 
  if [ $cntLoop -le 1 ]
  then
   rm -rf ../JMMV/JMMV_Test$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin
   cnt1=$((cnt1 - cnt2))
   cntLoop=$(( cntLoop + 1 ))
  else
   cntLoop=0;
   echo "The size of JMMV_$FileNameP1.bin doesn't match the size of the reference JMMVxxxxxxx.bin file"
  fi
 fi
fi
fi

cnt1=$((cnt1 + cnt2))
done < "$InputFileList"   #until end of FileNameList or NumVideos


#(($SetType = "train") && (! -e "../JMMV/JMMV_Train$TTSet"_QP"$QPISlice"_MVSR"$SearchRange"_MVRes"$mbmapXxX$StrComment/JMMV_$FileNameP1.bin"))
